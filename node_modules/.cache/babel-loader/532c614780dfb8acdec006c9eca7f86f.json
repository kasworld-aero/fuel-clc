{"ast":null,"code":"var _jsxFileName = \"/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js\";\nimport React from 'react';\nimport './InputForm.css';\n\nconst inputForm = props => {\n  const preventNaNHandler = () => {\n    if (isNaN(props.remainingFuel) || isNaN(props.deliveredFuel) || isNaN(props.finalFuelState)) {\n      return alert('Invalid Input');\n    } else {\n      return props.onClickHandler();\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (e.keycode === 13) {\n      console.log('return');\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"tail-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"A/C Tail Number\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"tail-number\",\n    type: \"text\",\n    value: props.tailNumber,\n    onChange: e => props.setTailNumber(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: isNaN(props.remainingFuel) ? 'input-box rejected' : 'input-box',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"remaining-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Fuel Remaining (A/C Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"remaining-fuel\",\n    type: \"text\",\n    value: props.remainingFuel,\n    onChange: e => props.setRemainingFuel(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(\"div\", {\n    className: \"input-box slidecontainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"specific-gravity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Specific Gravity\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"specific-gravity\",\n    type: \"range\",\n    min: \"0.7\",\n    max: \"0.88\",\n    defaultValue: props.specificGravity,\n    onChange: props.handleSliderChange,\n    className: \"slider\",\n    step: \"0.01\",\n    id: \"myRange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    id: \"spec-gravity-output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, props.specificGravity)), React.createElement(\"div\", {\n    className: isNaN(props.finalFuelState) ? 'input-box rejected' : 'input-box',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"final-fuelstate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Total A/C\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"final-fuelstate\",\n    type: \"text\",\n    value: props.finalFuelState,\n    onChange: e => props.setFinalFuelState(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(\"div\", {\n    className: isNaN(props.deliveredFuel) ? 'input-box rejected' : 'input-box',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"delivered-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Fuel Put In (Source Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"delivered-fuel\",\n    type: \"text\",\n    value: props.deliveredFuel,\n    onChange: e => props.setDeliveredFuel(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), \"Lts\")), React.createElement(\"button\", {\n    onClick: props.refuseEmptyStoredAircraftHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Stored Details\"), React.createElement(\"button\", {\n    onClick: preventNaNHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nexport default inputForm;","map":{"version":3,"sources":["/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js"],"names":["React","inputForm","props","preventNaNHandler","isNaN","remainingFuel","deliveredFuel","finalFuelState","alert","onClickHandler","handleKeyPress","e","keycode","console","log","tailNumber","setTailNumber","target","value","setRemainingFuel","specificGravity","handleSliderChange","setFinalFuelState","setDeliveredFuel","refuseEmptyStoredAircraftHandler"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './InputForm.css';\n\nconst inputForm = (props) => {\n    const preventNaNHandler = () => {\n        if (isNaN(props.remainingFuel) || isNaN(props.deliveredFuel) || isNaN(props.finalFuelState)) {\n            return alert('Invalid Input'); \n        } else {\n            return props.onClickHandler();\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.keycode === 13) {\n            console.log('return')\n        }\n    };\n\n    return (\n        <div>\n            <form>\n                <div className='input-box'>\n                    <label htmlFor='tail-number'>A/C Tail Number<br /></label>\n                    <input\n                        name='tail-number'\n                        type='text'\n                        value={props.tailNumber}\n                        onChange={e => props.setTailNumber(e.target.value)}\n                    />\n                </div>\n                <div className={isNaN(props.remainingFuel) ? 'input-box rejected' : 'input-box'}>\n                    <label htmlFor='remaining-fuel'>Fuel Remaining (A/C Gauges)<br /></label>\n                    <input\n                        name='remaining-fuel'\n                        type='text'\n                        value={props.remainingFuel}\n                        onChange={e => props.setRemainingFuel(e.target.value)}\n                    />Kg\n                </div>\n                <div className='input-box slidecontainer'>\n                    <label htmlFor='specific-gravity'>Specific Gravity<br /></label>\n                    <input\n                        name='specific-gravity'\n                        type='range'\n                        min='0.7'\n                        max='0.88'\n                        defaultValue={props.specificGravity}\n                        onChange={props.handleSliderChange}\n                        className='slider'\n                        step='0.01'\n                        id='myRange' /> \n                    <label id='spec-gravity-output'>{props.specificGravity}</label>               \n                </div>\n                <div className={isNaN(props.finalFuelState) ? 'input-box rejected' : 'input-box'}>\n                    <label htmlFor='final-fuelstate'>Total A/C<br /></label>\n                    <input\n                        name='final-fuelstate'\n                        type='text'\n                        value={props.finalFuelState}\n                        onChange={e => props.setFinalFuelState(e.target.value)} />Kg\n                </div>\n                <div className={isNaN(props.deliveredFuel) ? 'input-box rejected' : 'input-box'}>\n                    <label htmlFor='delivered-fuel'>Fuel Put In (Source Gauges)<br /></label>\n                    <input\n                        name='delivered-fuel'\n                        type='text'\n                        value={props.deliveredFuel}\n                        onChange={e => props.setDeliveredFuel(e.target.value)} />Lts\n                </div>\n            </form>\n            <button onClick={props.refuseEmptyStoredAircraftHandler}>Stored Details</button>\n            <button onClick={preventNaNHandler}>Submit</button>\n        </div>\n    )    \n};\n\nexport default inputForm;"]},"metadata":{},"sourceType":"module"}