{"ast":null,"code":"var _jsxFileName = \"/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js\";\nimport React from \"react\";\nimport \"./InputForm.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst inputForm = props => {\n  const preventNaNHandler = () => {\n    if (isNaN(props.remainingFuel) || isNaN(props.deliveredFuel) || isNaN(props.finalFuelState)) {\n      return alert(\"Invalid Input\");\n    } else {\n      return props.onClickHandler();\n    }\n  };\n\n  const handleKeyPress = (e, func) => {\n    if (e.key === \"Enter\") {\n      return func();\n    }\n  };\n\n  const tailNumEnterHandler = () => {\n    document.getElementById(\"remFuel\").focus();\n  };\n\n  const remFuelEnterHandler = () => {\n    document.getElementById(\"finFuel\").focus();\n  };\n\n  const finFuelEnterHandler = () => {\n    document.getElementById(\"fuelIn\").focus();\n  };\n\n  const fuelInEnterHandler = () => {\n    preventNaNHandler();\n  };\n\n  const storedAircraftButtonHandler = props.storedAircraftButtonHandler;\n  return React.createElement(\"div\", {\n    className: \"input-cont\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Enter Details\"), React.createElement(Paper, {\n    className: \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"input-box-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"tail-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"A/C Tail Number\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"input-box-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"tail-number\",\n    id: \"tailNumber\",\n    type: \"text\",\n    className: \"text-input\",\n    value: props.tailNumber,\n    onChange: e => props.setTailNumber(e.target.value),\n    onKeyPress: e => handleKeyPress(e, tailNumEnterHandler),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))), React.createElement(Paper, {\n    className: isNaN(props.remainingFuel) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"remaining-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Fuel Remaining (A/C Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"remaining-fuel\",\n    id: \"remFuel\",\n    type: \"number\",\n    className: \"text-input\",\n    value: props.remainingFuel,\n    onChange: e => props.setRemainingFuel(e.target.value),\n    onKeyPress: e => handleKeyPress(e, remFuelEnterHandler),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(Paper, {\n    className: \"input-box slidecontainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"specific-gravity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Specific Gravity\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"specific-gravity\",\n    type: \"range\",\n    min: \"0.7\",\n    max: \"0.88\",\n    defaultValue: props.specificGravity,\n    onChange: props.handleSliderChange,\n    className: \"slider\",\n    step: \"0.01\",\n    id: \"myRange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    id: \"spec-gravity-output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, props.specificGravity)), React.createElement(Paper, {\n    className: isNaN(props.finalFuelState) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"final-fuelstate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Total A/C\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"final-fuelstate\",\n    type: \"number\",\n    id: \"finFuel\",\n    className: \"text-input\",\n    value: props.finalFuelState,\n    onChange: e => props.setFinalFuelState(e.target.value),\n    onKeyPress: e => handleKeyPress(e, finFuelEnterHandler),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(Paper, {\n    className: isNaN(props.deliveredFuel) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"delivered-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Fuel Put In (Source Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"delivered-fuel\",\n    type: \"number\",\n    id: \"fuelIn\",\n    className: \"text-input\",\n    value: props.deliveredFuel,\n    onChange: e => props.setDeliveredFuel(e.target.value),\n    onKeyPress: e => handleKeyPress(e, fuelInEnterHandler),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), \"Lts\"), React.createElement(\"div\", {\n    className: \"button-cont\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"button-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, storedAircraftButtonHandler(), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: preventNaNHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default inputForm;","map":{"version":3,"sources":["/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js"],"names":["React","Button","Paper","inputForm","props","preventNaNHandler","isNaN","remainingFuel","deliveredFuel","finalFuelState","alert","onClickHandler","handleKeyPress","e","func","key","tailNumEnterHandler","document","getElementById","focus","remFuelEnterHandler","finFuelEnterHandler","fuelInEnterHandler","storedAircraftButtonHandler","tailNumber","setTailNumber","target","value","setRemainingFuel","specificGravity","handleSliderChange","setFinalFuelState","setDeliveredFuel"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./InputForm.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst inputForm = props => {\n  const preventNaNHandler = () => {\n    if (\n      isNaN(props.remainingFuel) ||\n      isNaN(props.deliveredFuel) ||\n      isNaN(props.finalFuelState)\n    ) {\n      return alert(\"Invalid Input\");\n    } else {\n      return props.onClickHandler();\n    }\n  };\n\n  const handleKeyPress = (e, func) => {\n    if (e.key === \"Enter\") {\n      return func();\n    }\n  };\n\n  const tailNumEnterHandler = () => {\n    document.getElementById(\"remFuel\").focus();\n  };\n\n  const remFuelEnterHandler = () => {\n    document.getElementById(\"finFuel\").focus();\n  };\n\n  const finFuelEnterHandler = () => {\n    document.getElementById(\"fuelIn\").focus();\n  };\n\n  const fuelInEnterHandler = () => {\n    preventNaNHandler();\n  };\n\n  const storedAircraftButtonHandler = props.storedAircraftButtonHandler;\n\n  return (\n    <div className=\"input-cont\">\n      <h1>Enter Details</h1>\n\n        <Paper className=\"input-box\">\n          <span className=\"input-box-item\">\n            <label htmlFor=\"tail-number\">A/C Tail Number</label>\n          </span><br />\n          <span className=\"input-box-item\">\n            <input\n              name=\"tail-number\"\n              id=\"tailNumber\"\n              type=\"text\"\n              className=\"text-input\"\n              value={props.tailNumber}\n              onChange={e => props.setTailNumber(e.target.value)}\n              onKeyPress={e => handleKeyPress(e, tailNumEnterHandler)}\n            />  \n          </span>\n        </Paper>\n        <Paper\n          className={\n            isNaN(props.remainingFuel) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"remaining-fuel\">\n            Fuel Remaining (A/C Gauges)\n            <br />\n          </label>\n          <input\n            name=\"remaining-fuel\"\n            id=\"remFuel\"\n            type=\"number\"\n            className=\"text-input\"\n            value={props.remainingFuel}\n            onChange={e => props.setRemainingFuel(e.target.value)}\n            onKeyPress={e => handleKeyPress(e, remFuelEnterHandler)}\n          />\n          Kg\n        </Paper>\n        <Paper className=\"input-box slidecontainer\">\n          <label htmlFor=\"specific-gravity\">\n            Specific Gravity\n            <br />\n          </label>\n          <input\n            name=\"specific-gravity\"\n            type=\"range\"\n            min=\"0.7\"\n            max=\"0.88\"\n            defaultValue={props.specificGravity}\n            onChange={props.handleSliderChange}\n            className=\"slider\"\n            step=\"0.01\"\n            id=\"myRange\"\n          />\n          <label id=\"spec-gravity-output\">{props.specificGravity}</label>\n        </Paper>\n        <Paper\n          className={\n            isNaN(props.finalFuelState) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"final-fuelstate\">\n            Total A/C\n            <br />\n          </label>\n          <input\n            name=\"final-fuelstate\"\n            type=\"number\"\n            id=\"finFuel\"\n            className=\"text-input\"\n            value={props.finalFuelState}\n            onChange={e => props.setFinalFuelState(e.target.value)}\n            onKeyPress={e => handleKeyPress(e, finFuelEnterHandler)}\n          />\n          Kg\n        </Paper>\n        <Paper\n          className={\n            isNaN(props.deliveredFuel) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"delivered-fuel\">\n            Fuel Put In (Source Gauges)\n            <br />\n          </label>\n          <input\n            name=\"delivered-fuel\"\n            type=\"number\"\n            id=\"fuelIn\"\n            className=\"text-input\"\n            value={props.deliveredFuel}\n            onChange={e => props.setDeliveredFuel(e.target.value)}\n            onKeyPress={e => handleKeyPress(e, fuelInEnterHandler)}\n          />\n          Lts\n        </Paper>\n      <div className=\"button-cont\">\n        <div className='button-wrapper'>\n          {storedAircraftButtonHandler()}\n          <Button variant=\"contained\" color=\"primary\" onClick={preventNaNHandler}>\n            Submit\n          </Button>\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default inputForm;\n"]},"metadata":{},"sourceType":"module"}