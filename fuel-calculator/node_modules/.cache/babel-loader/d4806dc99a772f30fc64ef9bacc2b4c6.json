{"ast":null,"code":"var _jsxFileName = \"/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js\";\nimport React from \"react\";\nimport \"./InputForm.css\";\n\nconst inputForm = props => {\n  const preventNaNHandler = () => {\n    if (isNaN(props.remainingFuel) || isNaN(props.deliveredFuel) || isNaN(props.finalFuelState)) {\n      return alert(\"Invalid Input\");\n    } else {\n      return props.onClickHandler();\n    }\n  };\n\n  const handleKeyPress = (e, func) => {\n    if (e.key === \"Enter\") {\n      return func();\n    }\n  };\n\n  const tailNumEnterHandler = () => {\n    document.getElementById('remFuel').focus();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"tail-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"A/C Tail Number\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"tail-number\",\n    type: \"text\",\n    value: props.tailNumber,\n    onChange: e => props.setTailNumber(e.target.value),\n    onKeyPress: e => handleKeyPress(e, tailNumEnterHandler),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: isNaN(props.remainingFuel) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"remaining-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Fuel Remaining (A/C Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"remaining-fuel\",\n    id: \"remFuel\",\n    type: \"text\",\n    value: props.remainingFuel,\n    onChange: e => props.setRemainingFuel(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(\"div\", {\n    className: \"input-box slidecontainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"specific-gravity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Specific Gravity\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"specific-gravity\",\n    type: \"range\",\n    min: \"0.7\",\n    max: \"0.88\",\n    defaultValue: props.specificGravity,\n    onChange: props.handleSliderChange,\n    className: \"slider\",\n    step: \"0.01\",\n    id: \"myRange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    id: \"spec-gravity-output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, props.specificGravity)), React.createElement(\"div\", {\n    className: isNaN(props.finalFuelState) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"final-fuelstate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Total A/C\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"final-fuelstate\",\n    type: \"text\",\n    value: props.finalFuelState,\n    onChange: e => props.setFinalFuelState(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), \"Kg\"), React.createElement(\"div\", {\n    className: isNaN(props.deliveredFuel) ? \"input-box rejected\" : \"input-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"delivered-fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Fuel Put In (Source Gauges)\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    name: \"delivered-fuel\",\n    type: \"text\",\n    value: props.deliveredFuel,\n    onChange: e => props.setDeliveredFuel(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), \"Lts\")), React.createElement(\"button\", {\n    onClick: props.refuseEmptyStoredAircraftHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Stored Details\"), React.createElement(\"button\", {\n    onClick: preventNaNHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nexport default inputForm;","map":{"version":3,"sources":["/home/hugeaclease/coding-projects/Engineer-Fuel-Calculator/fuel-calculator/src/components/InputForm/InputForm.js"],"names":["React","inputForm","props","preventNaNHandler","isNaN","remainingFuel","deliveredFuel","finalFuelState","alert","onClickHandler","handleKeyPress","e","func","key","tailNumEnterHandler","document","getElementById","focus","tailNumber","setTailNumber","target","value","setRemainingFuel","specificGravity","handleSliderChange","setFinalFuelState","setDeliveredFuel","refuseEmptyStoredAircraftHandler"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./InputForm.css\";\n\nconst inputForm = props => {\n  const preventNaNHandler = () => {\n    if (\n      isNaN(props.remainingFuel) ||\n      isNaN(props.deliveredFuel) ||\n      isNaN(props.finalFuelState)\n    ) {\n      return alert(\"Invalid Input\");\n    } else {\n      return props.onClickHandler();\n    }\n  };\n\n  const handleKeyPress = (e, func) => {\n    if (e.key === \"Enter\") {\n      return func();\n    }\n  };\n\n  const tailNumEnterHandler = () => {\n    document.getElementById('remFuel').focus();\n  };\n\n  return (\n    <div>\n      <form>\n        <div className=\"input-box\">\n          <label htmlFor=\"tail-number\">\n            A/C Tail Number\n            <br />\n          </label>\n          <input\n            name=\"tail-number\"\n            type=\"text\"\n            value={props.tailNumber}\n            onChange={e => props.setTailNumber(e.target.value)}\n            onKeyPress={e => handleKeyPress(e, tailNumEnterHandler)}\n          />\n        </div>\n        <div\n          className={\n            isNaN(props.remainingFuel) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"remaining-fuel\">\n            Fuel Remaining (A/C Gauges)\n            <br />\n          </label>\n          <input\n            name=\"remaining-fuel\"\n            id=\"remFuel\"\n            type=\"text\"\n            value={props.remainingFuel}\n            onChange={e => props.setRemainingFuel(e.target.value)}\n          />\n          Kg\n        </div>\n        <div className=\"input-box slidecontainer\">\n          <label htmlFor=\"specific-gravity\">\n            Specific Gravity\n            <br />\n          </label>\n          <input\n            name=\"specific-gravity\"\n            type=\"range\"\n            min=\"0.7\"\n            max=\"0.88\"\n            defaultValue={props.specificGravity}\n            onChange={props.handleSliderChange}\n            className=\"slider\"\n            step=\"0.01\"\n            id=\"myRange\"\n          />\n          <label id=\"spec-gravity-output\">{props.specificGravity}</label>\n        </div>\n        <div\n          className={\n            isNaN(props.finalFuelState) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"final-fuelstate\">\n            Total A/C\n            <br />\n          </label>\n          <input\n            name=\"final-fuelstate\"\n            type=\"text\"\n            value={props.finalFuelState}\n            onChange={e => props.setFinalFuelState(e.target.value)}\n          />\n          Kg\n        </div>\n        <div\n          className={\n            isNaN(props.deliveredFuel) ? \"input-box rejected\" : \"input-box\"\n          }\n        >\n          <label htmlFor=\"delivered-fuel\">\n            Fuel Put In (Source Gauges)\n            <br />\n          </label>\n          <input\n            name=\"delivered-fuel\"\n            type=\"text\"\n            value={props.deliveredFuel}\n            onChange={e => props.setDeliveredFuel(e.target.value)}\n          />\n          Lts\n        </div>\n      </form>\n      <button onClick={props.refuseEmptyStoredAircraftHandler}>\n        Stored Details\n      </button>\n      <button onClick={preventNaNHandler}>Submit</button>\n    </div>\n  );\n};\n\nexport default inputForm;\n"]},"metadata":{},"sourceType":"module"}